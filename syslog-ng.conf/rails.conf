@version: 3.35

# A syslog-ng conf to parse RUBY ON RAILS 3 and RUBY ON RAILS 2 logs to LTSV with line delimiter.
#
# destination is an example of a logs data platform accepting LTSV logs on port 12201
# like OVH logs data platform (https://docs.ovh.com/gb/en/logs-data-platform/quick-start/)

@define rails3_log_file "/var/log/app/rails3-app/production.log"
@define rails2_log_file "/var/log/app/rails2-app/production.log"

parser p_rails3 {
  csv-parser(columns("RAILS.START", "RAILS.HTTP_VERB", "RAILS.REQUEST_URL",
        "RAILS.FOR", "RAILS.IP", "RAILS.AT", "RAILS.DATE", "RAILS.TIMESTAMP", "RAILS.TIMEZONE")
      flags(escape-none,strip-whitespace)
      delimiters(" \r\n")
  );
  # in rails logs status code is writed as : Completed 200 OK in 199.1ms (Views: 142.9ms | ActiveRecord: 48.4ms)
  #                                     or : Completed 500 Internal Server Error in 25.2ms (Views: 24.0ms | ActiveRecord: 11.7ms)
  csv-parser(columns("RAILS.HEADER", "RAILS.RESPONSE")
    flags(escape-none,strip-whitespace)
    delimiters(chars(""),strings("Completed"))
  );
};
parser p_rails2 {
  csv-parser(columns("RAILS.START", "RAILS.CONTROLLER", "RAILS.FOR",
        "RAILS.IP", "RAILS.AT", "RAILS.DATE", "RAILS.TIMESTAMP", "RAILS.HTTP_VERB")
      flags(escape-none,strip-whitespace)
      delimiters(" \r\n")
  );
  # in rails logs status code and response time is writed as : Completed in 41ms (View: 23, DB: 7) | 200 OK [<< url >>]
  csv-parser(columns("RAILS.HEADER", "RAILS.RESPONSE_ALL_TIMES", "RAILS.RESPONSE")
    flags(escape-none,strip-whitespace)
    delimiters(chars(""),strings("Completed","|"))
  );
};

parser p_rails3_request_status {
  csv-parser(columns("RAILS.STATUS", "RAILS.RESPONSE_ALL_TIMES")
    delimiters(chars(""), strings("in","Rendered"))
    flags(escape-none,strip-whitespace)
    template("${RAILS.RESPONSE}")
  );
};
parser p_rails2_request_status {
  # in rails logs status code is writed as : 200 OK [<< url >>]
  csv-parser(columns("RAILS.STATUS_CODE", "RAILS.STATUS_TEXT", "RAILS.REQUEST_URL")
    delimiters(" ")
    flags(escape-none,strip-whitespace)
    template("${RAILS.RESPONSE}")
  );
};
parser p_rails2_request_times {
  # in rails logs response times are writed as : Completed in 41ms (View: 23, DB: 7)
  csv-parser(columns("RAILS.IN", "RAILS.RESPONSE_TIME", "RAILS.RESPONSE_PARTIAL_TIMES")
    delimiters(chars("()"), strings("in"))
    flags(escape-none,strip-whitespace)
    template("${RAILS.RESPONSE_ALL_TIMES}")
  );
};

parser p_rails3_timestamp {
  # in rails log dates are like : 2022-02-01 10:56:23 +0000
  date-parser(format("%Y-%m-%d %H:%M:%S %z") template("${RAILS.DATE} ${RAILS.TIMESTAMP} ${RAILS.TIMEZONE}"));
};
parser p_rails2_timestamp {
  # in rails log dates are like : 2022-02-01 10:56:23
  date-parser(format("%Y-%m-%d %H:%M:%S %z") template("${RAILS.DATE} ${RAILS.TIMESTAMP} +0000"));
};

parser p_rails_parameters {
  csv-parser(columns("RAILS.IGNORE","RAILS.PARAMS","RAILS.SESSION","RAILS.RENDER")
    delimiters(chars(""),strings("Parameters:","SessionId:","Redirected","Rendered","Rendering","[paperclip]"))
    flags(escape-none,strip-whitespace,greedy)
    template("${RAILS.HEADER}")
  );
};

template t_rails {
  template("type:rails.log\tX-OVH-TOKEN:`ovh-token`\ttime:${S_ISODATE}\thost:${PROGRAM}\turi:${RAILS.REQUEST_URL}\tstatus:${RAILS.STATUS_CODE}\tstatus_text:${RAILS.STATUS_TEXT}\tsession_id:${RAILS.SESSION}\tresponse_time:${RAILS.RESPONSE_TIME}\tview_response_time:${RAILS.VIEW_RESPONSE_TIME}\tdb_response_time:${RAILS.DB_RESPONSE_TIME}\ttags:${TAGS}\tparameters:${RAILS.PARAMS}\tfull_message:${MSG}\n");
  template_escape(no);
};

destination d_network_example {
    network(
      "url.to.your.ltsv.logs.platform"
      port(12201)
      transport(tls)
      tls(peer-verify("required-trusted") ca_dir("/etc/ssl/certs/"))
      ts_format("rfc3339")
      template(t_rails)
      keep-alive(yes)
      so_keepalive(yes)
      flags(no-multi-line)
    );
};

source s_rails3 {
  channel {
    source {
      file(`rails3_log_file` flags(no-parse) follow-freq(1) tags("rails", "tdn") program_override("tutos-local") multi-line-mode(prefix-suffix) multi-line-prefix("^Started") multi-line-suffix("ActiveRecord:.*$"));
    };
    parser(p_rails3);
    parser(p_rails3_request_status);

    rewrite { set("${RAILS.STATUS}", value("RAILS.STATUS_CODE")); };
    rewrite { set("${RAILS.STATUS}", value("RAILS.STATUS_TEXT")); };
    rewrite { subst('(\d+)\s.*', "$1", value("RAILS.STATUS_CODE")); };
    rewrite { subst('\d+\s(.*)$', "$1", value("RAILS.STATUS_TEXT")); };

    rewrite { set("${RAILS.RESPONSE_ALL_TIMES}", value("RAILS.RESPONSE_TIME")); };
    rewrite { subst('^(\d+\.\d+ms).*', "$1", value("RAILS.RESPONSE_TIME")); };

    parser(p_rails_parameters);
    if {
      filter{match('Views:' value("RAILS.RESPONSE_ALL_TIMES"));};
      rewrite { set("${RAILS.RESPONSE_ALL_TIMES}", value("RAILS.VIEW_RESPONSE_TIME")); };
      rewrite { subst('.*Views:\s(\d+\.\d+ms).*', "$1", value("RAILS.VIEW_RESPONSE_TIME")); };
    };
    if {
      filter { match('ActiveRecord:' value("RAILS.RESPONSE_ALL_TIMES")); };
      rewrite { set("${RAILS.RESPONSE_ALL_TIMES}", value("RAILS.DB_RESPONSE_TIME")); };
      rewrite { subst('.*ActiveRecord:\s(\d+\.\d+ms).*', "$1", value("RAILS.DB_RESPONSE_TIME")); };
    };
    parser(p_rails3_timestamp);
  };
};

source s_rails2 {
  channel {
    source {
      file(`rails2_log_file` flags(no-parse) follow-freq(1) tags("rails", "tdn") program_override("tutos-local") multi-line-mode(prefix-suffix) multi-line-prefix("^Processing") multi-line-suffix("Completed.*$"));
    };
    parser(p_rails2);
    parser(p_rails2_request_status);
    rewrite { subst('\[(.*)\]', "$1", value("RAILS.REQUEST_URL")); };
    parser(p_rails_parameters);
    parser(p_rails2_request_times);
    if {
      filter{message('View:');};
      rewrite { set("${RAILS.RESPONSE_PARTIAL_TIMES}", value("RAILS.VIEW_RESPONSE_TIME")); };
      rewrite { subst('View:\s(\d+).*', "$1", value("RAILS.VIEW_RESPONSE_TIME")); };
    };
    if {
      filter { message('DB:'); };
      rewrite { set("${RAILS.RESPONSE_PARTIAL_TIMES}", value("RAILS.DB_RESPONSE_TIME")); };
      rewrite { subst('.*DB:\s(\d+).*', "$1", value("RAILS.DB_RESPONSE_TIME")); };
    };
    rewrite { subst('\)$', '', value("RAILS.TIMESTAMP")); };
    parser(p_rails2_timestamp);
  };
};

log {
  source(s_rails3); source(s_rails2);
  destination(d_network_example);
  flags(flow-control);
};
